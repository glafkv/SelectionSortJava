README: I have each type of sort clearly named so there is no confusion. Underneath the source code, there will be a screen shot of one result I got for the above code. I have all 6 different types of sorting algorithms on this one document.
//Author: Gabi Appel
//Due Date: 10/23/18
//Sort type: Selection
//Purpose: to see how long it takes different arrays to be sorted with selection sort, to later compare with different types of sorts. 
import java.util.*;
public class SelectionSort {

	public static void main(String[] args) {
		SelectionSort num = new SelectionSort();
		
		//This section sorts the already sorted array of 100.
		int arrSortedHund[] = sortedArrayHund();
		long startSortedHund = System.currentTimeMillis();
		num.sort(arrSortedHund);
		System.out.printf("Time take for already sorted 100:%d ms \n ", time(startSortedHund));
		
		//This section sorts the already sorted array of 1000.
		int arrSortedThou[] = sortedArrayThousand();
		long startSortedThou = System.currentTimeMillis();
		num.sort(arrSortedThou);
		System.out.printf("Time taken for already sorted 1000: %d ms\n ", time(startSortedThou));
		
		//This section sorts the already sorted array of 10000.
		int arrSortedTenThou[] = sortedArrayTenThou();
		long startSortedTenThou = System.currentTimeMillis();
		num.sort(arrSortedTenThou);
		System.out.printf("Time taken for already sorted 10000: %d ms\n ", time(startSortedTenThou));
		
		//This section sorts the random 100.
		int arrRandHund[] = randomArrayHund();
		long startRandHund = System.currentTimeMillis();
		num.sort(arrRandHund);
		System.out.printf("Time taken for random 100: %d ms\n", time(startRandHund));
		
		//This section sorts the random thousand.
		int arrRandThou[] = randomArrayThousand();
		long startRandThou = System.currentTimeMillis();
		num.sort(arrRandThou);
		System.out.printf("Time taken for random 1000: %d ms \n" , time(startRandThou));
		
		//This section sorts the random 10000
		int arrRandTenThou[] = randomArrayTenThou();
		long startRandTenThou = System.currentTimeMillis();
		num.sort(arrRandTenThou);
		System.out.printf("Time taken for random 10000: %d ms \n" , time(startRandTenThou));
		
		//This section sorts 10th element out of place.
		int arrOneRand [] = oneRandomHund();
		long startOneRandHund = System.currentTimeMillis();
		num.sort(arrOneRand);
		System.out.printf("Time taken for one random 100: %d ms \n" , time(startOneRandHund));

		//The section sorts 10th element out of place.
		int arrOneRandThou [] = oneRandomThou();
		long startOneRandThou = System.currentTimeMillis();
		num.sort(arrOneRandThou);
		System.out.printf("Time taken for one random 1000: %d ms \n", time(startOneRandThou));
		
		//This section sorts 10th element out of place.
		int arrOneRandTenThou [] = oneRandomTenThou();
		long startOneRandTenThou = System.currentTimeMillis();
		num.sort(arrOneRandTenThou);
		System.out.printf("Time taken for one random 10000: %d ms \n", time(startOneRandTenThou));
		
		
	}
	
	//This function has an already sorted array of ten numbers. 
	public static int[] sortedArrayHund(){
		int [] sortArr = new int[100];
		
		for(int i = 0; i < sortArr.length; i++) {
			sortArr[i] = i + 1;
		}
		return sortArr;
	}
	//This function has an already sorted array of one thousand numbers.
	public static int[] sortedArrayThousand() {
		int [] sortArr = new int[1000];
		
		for(int i = 0; i < sortArr.length; i++) {
			sortArr[i] = i + 1;
		}
		return sortArr;
	}
	//This function has an already sorted array of ten thousand numbers.
	public static int[] sortedArrayTenThou() {
		int [] sortArr = new int[10000];
		
		for(int i = 0; i < sortArr.length; i++) {
			sortArr[i] = i + 1;
		}
		return sortArr;
	}
	//This function has a random array of 100 integers.
	public static int[] randomArrayHund() {
		int [] randArray = new int[100];
		
		for(int i = 0; i < randArray.length; i++) {
			randArray[i] = (int)(Math.random() * 100);
		}
		return randArray;
	}
	//This function has a random array of 1000 ints.
	public static int[] randomArrayThousand() {
		int [] randArray = new int[1000];
		
		for(int i = 0; i < randArray.length; i++) {
			randArray[i] = (int)(Math.random() * 1000);
		}
		return randArray;
	}
	//This function has a random array of 10000 ints. 
	public static int[] randomArrayTenThou() {
		int [] randArray = new int[10000];
		
		for(int i = 0; i < randArray.length; i++) {
			randArray[i] = (int)(Math.random() * 10000);
		}
		return randArray;
	}
	//The 10th element is one out of place.
	public static int[] oneRandomHund() {
		int [] oneRand = new int[10];
		int rand = 10;
		for(int i = 0; i < oneRand.length; i++) {
			oneRand[i] = i + 1;
			oneRand[9] = rand;
			rand = oneRand[8];
			oneRand[8] = oneRand[9];
		}
		return oneRand;
		
	}
	public static int[] oneRandomThou() {
		int [] oneRand = new int[1000];
		int temp = 10;
		for(int i = 0; i < oneRand.length; i++) {
			oneRand[i] = i + 1;
			oneRand[9] = temp;
			temp = oneRand[8];
			oneRand[8] = oneRand[9];
		}
		return oneRand;
	}
	public static int[] oneRandomTenThou() {
		int [] oneRand = new int[10000];
		int temp = 10;
		for(int i = 0; i < oneRand.length; i++) {
			oneRand[i] = i + 1;
			oneRand[9] = temp;
			temp = oneRand[8];
			oneRand[8] = oneRand[9];
		}
		return oneRand;
	}
	//This is my sorting function.
	void sort(int arr[]) {
		int n = arr.length;
		
		for(int i = 0; i < n-1; i++) {
			
			int min = i;
			for(int j = i+1; j < n; j++) {
				if(arr[j] < arr[min]) {
					min = j;
				}
			}
			int temp = arr[min];
			arr[min] = arr[i];
			arr[i] = temp;
		}
	}
	//Timer function
	public static long time(long start) {
		long time = System.currentTimeMillis() - start;
		return time;
	}
}
	

